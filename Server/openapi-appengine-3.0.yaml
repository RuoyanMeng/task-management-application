openapi: 3.0.0

info:
  version: 3.0.0
  title: Endpoints API
  description: Endpoints API for backend deploy
  termsOfService: terms


paths:
  /task:
    post:
      summary: Create
      requestBody: 
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Task'

      responses:
        201:
          description: Task is Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /tasks/{projectID}:
    get:
      summary: get tasks
      parameters:
        - in: path
          name: projectID
          required: true
          schema:
            type: integer
          description: project id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /task/{id}:
    put:
      summary: Update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody: 
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        200:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /project:
    post:
      summary: Create a project 
      requestBody: 
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Project'

      responses:
        201:
          description: Task is Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /project/{id}:
    get:
      summary: get project info 
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: project id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
    delete:
      summary: Delete
      parameters:
        - in: path
          name: id
          required: true
          schema:
            $ref: '#/components/schemas/Project'  
      responses:
        200:
          description: delete OK
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
    put:
      summary: Update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody: 
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        200:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /projects/{userID}:
    get:
      summary: get projects belongs to one user 
      parameters:
        - in: path
          name: userID
          required: true
          schema:
            type: integer
          description: user id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  

  /user:
    post:
      summary: Create a User 
      requestBody: 
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/User'

      responses:
        201:
          description: Task is Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'      
  /user/updpsw/{id}:
    put:
      summary: Update user password
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody: 
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{id}:
    get:
      summary: get a user info
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: user id
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /users:
    get:
      summary: get user by query user name
      content:
          application/json:
            schema:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'        

components:
  schemas:
    Task:  
      type: object
      required:
      - description
      - status
      - deadline
      - projectID
      properties:
        id: 
          type: string
          readOnly: true
        projectID:
          type: string
          readOnly: true
        description:
          type: string
          minLength: 1
          maxLength: 100
        status:
          type: string
          minLength: 1
          enum: [pending,ongoing,completed]
        deadline:
          type: string
          readOnly: true
          format: date-time
    Tasks:
      type: array
      description: An array of tasks
      items:
        $ref: '#/components/schemas/Task'

    Project:  
      type: object
      required:
      - name
      - description
      - isPersonal
      - administrator
      properties:
        id: 
          type: string
          readOnly: true
        description:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
          maxLength: 100
        isPersonal:
          type: string
          minLength: 1
          enum: [Personal,Group]
        modificationDate:
          type: string
          format: date-time
        creationDate:
          type: string
          format: date-time
        administrator:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ProjectUser'
          readOnly: true
        collaborators: 
          type: array
          items:
            $ref: '#/components/schemas/ProjectUser'
  
    Projects:
      type: array
      description: An array of project
      items:
        $ref: '#/components/schemas/Project'
       
    ProjectUser:
      type: object
      description: users in a project
      required:
      - user
      - isFavorite
      properties:
        user: 
          type: string
        isFavorite: 
          type: boolean

    User:
      type: object
      required:
      - name
      - email
      - password
      properties:
        id: 
          type: string
          readOnly: true
        name:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
        password:
          type: string
    
    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'

  
    Error:
      type: object
      required: 
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string